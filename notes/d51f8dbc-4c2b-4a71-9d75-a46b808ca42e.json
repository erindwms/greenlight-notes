{"title":"Pure Functions","message":"Pure Functions are deterministic, given the same input the function will always return the same output.\n\n**A pure function will not cause side effects.**\n\nNo side effects\n* Does not mutate passed in values\n* Does not change variables defined outside of function\n* Does not change application state\n\nPay attention to native methods\n[].splice() impure\n[].slice() pure\n[].push() impure\n[].concat() pure\n[].sort() impure\n[].reverse() impure\nothers\n\n** stack trace\nall the code that's ran to the point where you are\n\nMaking copies of complex data\nArrays\n\n`const fruits = ['watermelon', 'kiwi', 'Avocado', 'mango'];`\n\n```\nconst copy = fruits.slice();\nconst copy = [].concat(fruits);\nconst copy = Array.from(fruits);\nconst copy = [...fruits];\n```\n\nMost of the time if  a function returns something new, the function is pure.\n\nFavor Pure Functions, but...\n\nIf possible, use pure function. However impure functions are sometimes necessary:\n* click handlers\n* network calls\n* file access\n* DOM manipulation\n\nWhat other examples can you think of?\n\n\n\n\n","id":"d51f8dbc-4c2b-4a71-9d75-a46b808ca42e","date":"2018-08-14T00:15:51.502Z"}