{"title":"Keyword \"this\"","message":"\"this\" is an Object\n\nBind returns a new function. Call & Apply execute the current function immediately.\n\nThe keyword \"this\" refers to the context in which a function is called. The value of this varies depending on how a function is called.\n\nAlways an Object or undefined.\nOnly known at call time.\n\n**Free Function Invocation**\nFunction called freely (not as a method of an Object.)\n\"This\" refers to the Global context.\n\n**Method Invocation**\nFunction called as a method of an Object.\n\"this\" refers to the object on which the method is called.\n\n**Using Function.prototype.bind(), .call(), .apply()**\nAll take a context Object as their first argument.\nBinds the value of this to the passed Object.\n.call() and .apply() invoke the Function with the new context.\n.bind does not immediately invoke the function, it returns a new function that is bound to the context argument.\n\n**Using Function.prototype.bind()**\n.bind() returns a new Function that is bound to the context argument.\n\n**Differences between Function.prototype .call() & .apply()**\n\n...rest parameter <--- look this up\n\n.call() takes arguments as a list.\n.apply() takes arguments as an Array.\n\n**Construction Mode**\nevery word is capitalized with constructors\nparameters are placeholders\ndefault function parameter: allows normal parameters to be initialized with the default value if no value or undefined is passed. \n\n\"this\" always bound to instance.\n\nNew operator (from MDN)\nThe new operator creates an instance of a user-defined object type or one of the built-in object types that has a constructor function.\n\n**Helpful Mantra**\nWhat is to the left of the dot (.) at call time?\n\n**Arrow Functions and this**\nGet this binding from the lexical scope (where the function is declared).\nThe highlighted functions is invoked freely, so when it is invoked, this would normally refer to the global context, but since the function is defined as an arrow function the value of this comes from the blue lexical scope.\n","id":"05aca087-7532-487a-af1c-7de9a8b24a01","date":"2018-08-10T01:01:08.989Z"}